import random
import itertools
import collections
import time

class TileNode:
    """
    A class representing a node in the Tile Puzzle Solver
    - 'puzzle' is a TilePuzzle instance
    - 'parent' is the preceding node generated by the solver, if any
    - 'action' is the action taken to produce the puzzle, if any
    """
    def __init__(self, puzzle, parent=None, action=None):
        self.puzzle = puzzle
        self.parent = parent
        self.action = action
        if (self.parent != None):
            self.g = parent.g + 1
        else:
            self.g = 0

    @property
    def score(self):
        return (self.g + self.h)

    @property
    def state(self):
        """
        Return a hashable representation of self
        """
        return str(self)

    @property 
    def path(self):
        """
        Reconstruct a path from the root 'parent' to the current node
        """
        node, p = self, []
        while node:
            p.append(node)
            node = node.parent
        yield from reversed(p)

    @property
    def solved(self):
        """ Check if the puzzle is solved """
        return self.puzzle.solved

    @property
    def actions(self):
        """ Get actions accessible at the current state """
        return self.puzzle.actions

    @property
    def h(self):
        """ Manhattan distance heuristic """
        return self.puzzle.manhattan

    @property
    def f(self):
        """ Calculate f value """
        return self.h + self.g

    def __str__(self):
        return str(self.puzzle)

class TileSolver:
    """
    A solver for the Tile Puzzle
    - 'start' is a TilePuzzle instance
    """
    def __init__(self, start):
        self.start = start

    def solve(self):
        """
        Perform breadth first search and return a path
        to the solution, if it exists
        """
        queue = collections.deque([TileNode(self.start)])
        seen = set()
        seen.add(queue[0].state)
        while queue:
            queue = collections.deque(sorted(list(queue), key=lambda node: node.f))
            node = queue.popleft()
            if node.solved:
                return node.path

            for move, action in node.actions:
                child = TileNode(move(), node, action)

                if child.state not in seen:
                    queue.appendleft(child)
                    seen.add(child.state)

class TilePuzzle:
    """
    A class representing a Tile Puzzle
    - 'board' should be a square list of lists with integer entries 0...(width^2 - 1)
       e.g. [[1,2,3],[4,0,6],[7,5,8]]
    """
    def __init__(self, board):
        self.width = len(board[0])
        self.board = board

    @property
    def solved(self):
        """
        Check if the puzzle is solved
        """
        N = self.width * self.width
        return str(self) == ''.join(map(str, range(1,N))) + '0'

    @property 
    def actions(self):
        """
        Get a list of possible actions
        """
        def create_move(at, to):
            return lambda: self._move(at, to)

        moves = []
        for i, j in itertools.product(range(self.width), range(self.width)):
            direcs = {'R':(i, j-1), 'L':(i, j+1), 'D':(i-1, j), 'U':(i+1, j)}

            for action, (r, c) in direcs.items():
                if r >= 0 and c >= 0 and r < self.width and c < self.width and \
                   self.board[r][c] == 0:
                    move = create_move((i,j), (r,c)), action
                    moves.append(move)
        return moves

    @property
    def manhattan(self):
        """
        Calculate the Manhattan distance heuristic
        """
        distance = 0
        for i in range(self.width):
            for j in range(self.width):
                if self.board[i][j] != 0:
                    x, y = divmod(self.board[i][j]-1, self.width)
                    distance += abs(x - i) + abs(y - j)
        return distance

    def shuffle(self):
        """
        Shuffle the puzzle by making 1000 random moves
        """
        puzzle = self
        for _ in range(1000):
            puzzle = random.choice(puzzle.actions)[0]()
        return puzzle

    def copy(self):
        """
        Create a copy of the puzzle
        """
        board = []
        for row in self.board:
            board.append([x for x in row])
        return TilePuzzle(board)

    def _move(self, at, to):
        """
        Move tiles
        """
        copy = self.copy()
        i, j = at
        r, c = to
        copy.board[i][j], copy.board[r][c] = copy.board[r][c], copy.board[i][j]
        return copy

    def pprint(self):
        """
        Pretty print the puzzle
        """
        for row in self.board:
            print(row)
        print()

    def __str__(self):
        return ''.join(map(str, self))

    def __iter__(self):
        for row in self.board:
            yield from row

# Example usage
# board = [[1,2,3],[4,5,0],[6,7,8]]
board = [[7, 8, 6], [2, 5, 4], [3, 0, 1]]
puzzle = TilePuzzle(board)
# puzzle = puzzle.shuffle()
solver = TileSolver(puzzle)
tic = time.time()
solution = solver.solve()
toc = time.time()

steps = 0
for node in solution:
    print(node.action)
    node.puzzle.pprint()
    steps += 1

print("Total number of steps: " + str(steps))
print("Total amount of time in search: " + str(toc - tic) + " second(s)")
